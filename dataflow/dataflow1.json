{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 split(startsWith(CompanyName ,'A'),",
				"     disjoint: false) ~> split1@(ACustomer, Other)",
				"split1@ACustomer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          TransactionId as string,",
				"          CustomerId as integer,",
				"          ProductId as short,",
				"          Quantity as byte,",
				"          Price as decimal(38,18),",
				"          TotalAmount as decimal(38,18),",
				"          TransactionDate as integer,",
				"          ProfitAmount as decimal(38,18),",
				"          Hour as byte,",
				"          Minute as byte,",
				"          StoreId as short",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}